global sequence player_class_list,class_freelist
player_class_list={}
class_freelist={}
constant player_object_id = 1
constant player_stats = 2
constant player_position = 3
constant player_class = 4
constant player_2dposition = 5
constant player_name = 6
constant player_message = 7
constant player_client = 8

--{temp[1],stats,location_get(temp[2]),found}

sequence grid
grid={}
for i=1 to 255 do
  grid=append(grid,repeat({},255))	
end for

procedure insert_into_grid(atom x, atom y, integer handle)
  grid[floor(y)][floor(x)]&=handle
  --?grid[floor(y)][floor(x)]
end procedure

procedure remove_from_grid(atom x, atom y, integer handle)
sequence data
  data={}
  --?grid[floor(y)][floor(x)]
  for i=1 to length(grid[floor(y)][floor(x)]) do
  	 if grid[floor(y)][floor(x)][i]!=handle then
  	  	data&=grid[floor(y)][floor(x)][i]
  	 end if
  end for
  grid[floor(y)][floor(x)]=data
end procedure

global function get_grid(atom x, atom y)
  return grid[floor(y)][floor(x)]
  --grid[floor(y-1)][floor(x-1)]& grid[floor(y-1)][floor(x)]&grid[floor(y-1)][floor(x+1)]&
  --       grid[floor(y)][floor(x-1)]&grid[floor(y)][floor(x)]&grid[floor(y)][floor(x+1)]&
  --       grid[floor(y+1)][floor(x-1)]&grid[floor(y+1)][floor(x)]&grid[floor(y+1)][floor(x+1)]
end function

global function player_new(integer object_id, sequence stats, sequence position, integer class,sequence position2d,sequence name,integer client)
  integer handle
  if length(class_freelist)>0 then
    handle= class_freelist[1]
    class_freelist = class_freelist[2..length(class_freelist)]
  else
    player_class_list= append(player_class_list,{})
    handle=length(player_class_list)
  end if

   player_class_list[handle]={object_id,stats,position,class,position2d,name,{"",0},client}
   
   if class!=1280 then
     insert_into_grid(position[1],position[2],handle)
   end if

  return handle
end function

global procedure player_update(integer handle,sequence stats, sequence position,sequence position2d)
  if player_class_list[handle][player_class]!=1280 then
    remove_from_grid(player_class_list[handle][player_position][1],player_class_list[handle][player_position][2],handle)--previous position 
  end if
  player_class_list[handle][player_stats]=stats
  player_class_list[handle][player_position]=position
  player_class_list[handle][player_2dposition]=position2d
  if player_class_list[handle][player_class]!=1280 then
  insert_into_grid(player_class_list[handle][player_position][1],player_class_list[handle][player_position][2],handle)-- new positon 
  end if
end procedure

global procedure player_message_set(integer handle,sequence message)
  player_class_list[handle][player_message]=message
end procedure

global function player_stats_get(integer handle)
  return player_class_list[handle][player_stats]
end function

global function player_class_get(integer handle)
  return player_class_list[handle][player_class]
end function

global function player_message_get(integer handle)
  return player_class_list[handle][player_message]
end function

global procedure player_delete(integer handle)
  if player_class_list[handle][player_class]!=1280 then
  remove_from_grid(player_class_list[handle][player_position][1],player_class_list[handle][player_position][2],handle
  end if
  player_class_list[handle]={}
  class_freelist =append(class_freelist, handle)
end procedure

global procedure player_freelist_delete()--hack
  class_freelist={}
end procedure
